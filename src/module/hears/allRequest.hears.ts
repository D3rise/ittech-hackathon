import IHears from "../../interface/module/hears/hears.interface";
import IContext from "../../interface/context/context.interface";
import RequestEntity, { RequestStatus } from "../../entity/request.entity";
import { deunionize, Markup } from "telegraf";
import { FindManyOptions } from "typeorm";
import { UserRole } from "../../entity/user.entity";

export default class AllRequestHears implements IHears {
  triggers = [
    "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏",
    "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏",
    "üìï –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏",
    "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏",
  ];

  async exec(ctx: IContext) {
    const text = deunionize(ctx.message)?.text;
    if (!text) return;
    if (
      ctx.session.user.role !== UserRole.MODERATOR &&
      text !== "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏"
    ) {
      return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!");
    }

    let findOptions: FindManyOptions<RequestEntity>;

    switch (text) {
      case "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
        findOptions = {
          where: [
            {
              status: RequestStatus.DOCS_PENDING,
            },
            {
              status: RequestStatus.PROCESSING,
            },
          ],
        };
        break;
      case "üìï –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
        findOptions = {
          where: [
            {
              status: RequestStatus.ACCEPTED,
            },
            {
              status: RequestStatus.REJECTED,
            },
          ],
        };
        break;
      case "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏":
        findOptions = {
          where: {
            author: {
              telegramId: ctx.from?.id,
            },
          },
          relations: ["author"],
        };
        break;
      default:
        findOptions = {};
    }

    const requestRepository = ctx.bot.db.getRepository(RequestEntity);
    const requests = await requestRepository.find(findOptions);
    if (!requests.length) {
      return ctx.reply(
        text === "–í—Å–µ –∑–∞—è–≤–∫–∏" ? "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç!" : "–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
      );
    }

    for (const request of requests) {
      await ctx.replyWithHTML(
        `<b>–ó–∞—è–≤–∫–∞ #${request.id}</b>\n` +
          `<b>–§–∞–º–∏–ª–∏—è</b>: ${request.surname}\n` +
          `<b>–ò–º—è</b>: ${request.name}\n` +
          `<b>–û—Ç—á–µ—Å—Ç–≤–æ</b>: ${request.middlename}\n` +
          `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: ${request.telephone}`,
        Markup.inlineKeyboard([
          Markup.button.callback(
            "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É",
            `showRequest:${request.id}`
          ),
        ])
      );
    }
  }
}
